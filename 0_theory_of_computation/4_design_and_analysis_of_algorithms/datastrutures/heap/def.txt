What is it?
    Priority Queue (Demaine, Devadas, 2011):
        set of elements S 
            where each element has key K (Demaine, Devadas, 2011).
            
            operations:
                insert(S, x) => insert x into S
                max(s) => return element with ma key in S
                extract_max(S) => remove and return element with max key in S
                increase_key(S, x, k) => increase key of element x in S to k
                    could decrease depending on application
Heap:
    def:
        an implementation of a Priority Queue (Demaine, Devadas, 2011).
        array S visualized as a nearly complete binary tree.
            NB: conditionally complete based on number of members of S (Demaine, Devadas, 2011):
        
            1 |2 |3 |4|5|6|7|8|9|10|
            16|14|10|8|7|9|3|2|4|1 |

                                16¹ 
                             /        \
                            14²        10³ 
                          /    \       /  \
                         8⁴     7⁵    9⁶   3⁷
                        / \    /
                       2⁸  4⁹ 1¹⁰ 

            Heap as a Tree
                i = index of element x in array S
                root = first element (i = 1)
                parent(i) = i/2
                left(i) = 2i
                right(i) = 2i + 1

                height of tree is bound by logN,
                    because the tree representation/visualization is nearly complete tree.  

Max Heap (Demaine, Devadas, 2011):

    def: 
        an implementation of a Heap with the Max Heap property.
        Max Heap property = The key of a node
                        >= the keys of both its children.

    Abstract Data Type(ADT) :
        - max_heapify(A, i)
            O(logN) => N = A length
            NB: assumes trees at left(i) and right(i) are max heaps (i.e. already correct)
        - build_max_heap(A)
            for i in n/2 down to 1
                max_heapify(A, i)

            i = n/2 since leaves already satisfy max heap property.
                    O
                        /   \
                        O     O
                    /   \
                    O     O
                    / \   /
        leaves = O   O O
    
        leaves = elements A[n/2 + 1 ... n]
        ∴ O(NlogN)

    Performance:
        - observe max_heapify takes:
            - O(1) time for nodes 1 level above leaves
            - and in general O(L) for nodes that 
                L level above leaves

        - observe we have:
            - n/4 nodes at level 1
            - n/8 nodes at level 2
            - 1 node at level logN    
            
References: 
    Demaine E., Devadas S. Introduction To Algorithms. 2011. https://ocw.mit.edu/courses/6-006-introduction-to-algorithms-fall-2011/resources/lecture-4-heaps-and-heap-sort/.