A set of things(nodes/vertices)
    and the relationships(edges) between the nodes
        there can also be no relationships between all or some of the nodes (Leighton, van Dijk, 2010).

Formal(graph theory) definition (Leighton, van Dijk, 2010).:
    A pair of sets (V, E) where
        V is a set of vertices/nodes
        E is a set of 2-item subsets of V

Edges (Leighton, van Dijk, 2010).:
    (N - 1)Â² = the number of edges in a graph with all vertices connected.
        
Types (Leighton, van Dijk, 2010):
    - undirected: edges have no direction
        example:
            y connected_to x = x connected_to y
            y - x = y - x [`-` = connected_to]
            therefore: bidirectional 

    - directed(digraph): edges have direction
            example:
                y connected_to x != x connected_to y
                y -> x != x -> y
                therefore: unidirectional

    - weighted: edges have weights(the weights can represent arbitrary values(distance, cost, strength etc))
                can be either directed or undirected
    
    - Special graphs (concepts represented as graphs)[many more exist]:
        - Tree
        - Rooted Tree
            In-Tree
            Out-Tree
        - Directed Acyclovir Graph(DAG)
        - Cyclic Graphs
        - Bipartite Graph
        - Complete Graph (i.e. connected graph)

Representations (Leighton, van Dijk, 2010):    
    - Adjacency list
        Node stores:
            name
            its data (optional)
            list nodes it is connected to

        example: #python
            class Node:
                name = ""
                connections = [] #type Node

            class Graph
                nodes = [] #type Node

    - Adjacency matrix,
        N * N matrix(m), where N is number of nodes
        Truth value at m[i][j] = edge between node i and j
        
            00001
            00100
            10101
            01101

    - Edge list

Performance:
    How fast is it to perform the operation? (i.e. Time Complexity)
        => Measured in terms of the number of steps it takes to complete the operation

    Read: Looking up something from a particular spot in the data-structure
        Steps = 


    Search: Looking for a particular value in the data-structure

        Breadth First Search
            Starting at a node
                explore all its neighbours
                before moving on the next node(to explore all its neighbours)
            Steps = O(V)

        Depth First Search
            Starting at a node
                explore each branch completely
                before moving on to next branch(to explore it completely)
            
            Steps = O(V)

        Best Suited Use Cases
            Visit every node in graph => BFS and DFS
                NB: DFS simpler for this
            
            Determine path between two nodes (or shortest path) => BFS
                BFS to find an answer, first interrogates ALL neighbours of a node X,
                    thus takes the shortest path to answering the question
                        as it relates to X
                DFS to find an answer, explores an increasingly narrower branch of the graph rooted at node X
                    hence reduces the probability of find the answer, per search attempt
                        Because it narrows down search space, per attempt

        Example:
            0: 1, 3
            1: 3, 4

    Insert: Adding a value to the data-structure 
        Steps = 

    Delete: Removing a value from the data-structure
        Steps = 


References: 
    Leighton T., van Dijk M. Mathematics For Computer Science. 2010. https://ocw.mit.edu/courses/6-042j-mathematics-for-computer-science-fall-2010/resources/lecture-6-graph-theory-and-coloring/.
