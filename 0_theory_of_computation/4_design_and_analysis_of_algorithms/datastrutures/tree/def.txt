What is it?
    A type of graph.
        A connected graph without cycles.
    Has the following properties:
        - has a root node(strictly not true in Graph theory but true for programming)
        - the root node has zero or more child nodes
        - the child nodes have zero or more child nodes(this repeats until the bottom(i.e. leafs))
        - the nodes my or may not be in order
        - may NOT contain cycles
        - May have data of any type
        - nodes may or may not have links back to parents

    Types:
        1. N-ary Tree, where N = number of child nodes
        2. Binary
        3. Binary Search Tree
        4. Balanced
            Can support O(long n) insert and find
            Red-black 
            AVL Tree
        5. Unbalanced
        6. Complete 
        7. Full
        8. Perfect

        1. Any data structure that satisfies properties listed above
        2. Each node has <= 2(max 2) child nodes
        3. Each node has <= 2(max 2) child nodes
           The left child is less than the parent
           The right child is greater than the parent
         
    Representations:    


Performance Analysis:
    How fast is it to perform the operation? (i.e. Time Complexity)
        => Measured in terms of the number of steps it takes to complete the operation

    Read: Looking up something from a particular spot in the data structure
        Steps = 

    
    Search: Looking for a particular value in the data structure
        Steps = 

    Insert: Adding a value to the data structure 
        Steps = 

    Delete: Removing a value from the data structure
        Steps = 
